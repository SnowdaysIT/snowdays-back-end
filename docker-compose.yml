version: '2'

services:
  db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRAPHILE_API_USER=$POSTGRAPHILE_API_USER
      - POSTGRAPHILE_API_PASS=$POSTGRAPHILE_API_PASS
    command: postgres -c 'listen_addresses="*"'
    volumes:
      - /srv/docker/postgresql:/var/lib/postgresql
      - /docker_resources/postgres_init:/docker-entrypoint-initdb.d
    container_name: db

  ci_db:
    image: postgres
    networks:
      - snowdays_default
    environment:
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRAPHILE_API_USER=$POSTGRAPHILE_API_USER
      - POSTGRAPHILE_API_PASS=$POSTGRAPHILE_API_PASS
      - HOST_PWD=$HOST_PWD
    command: postgres -c 'listen_addresses="*"'
    volumes:
      - ${HOST_PWD}docker_resources/postgres_init:/docker-entrypoint-initdb.d
    container_name: ci_db

  node_base:
    image: node:10.16.3-alpine
    volumes:
      - ./:/snowdays-back-end
    working_dir: /snowdays-back-end

  node_install:
    extends:
      service: node_base
    command: /bin/sh docker_resources/docker_dev_node_install.sh

  backend:
    extends:
      service: node_base
    networks:
      - snowdays_default
    environment:
      - JWT_SECRET=$JWT_SECRET
      - TARGET_DB_ADDR=$TARGET_DB_ADDR
      - POSTGRES_DB=$POSTGRES_DB
      - POSTGRES_USER=$POSTGRES_USER
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - POSTGRAPHILE_API_USER=$POSTGRAPHILE_API_USER
      - POSTGRAPHILE_API_PASS=$POSTGRAPHILE_API_PASS
    command: npm run dev
    ports:
      - 3000:3000
    container_name: backend
networks:
  snowdays_default:
    external:
      name: snowdays_default
